global !p
# texMathZones = ['texMathZone' + x for x in ['', 'X', 'XX', 'Env', 'EnvStarred', 'Ensured']]
# texIgnoreMathZones = ['texMathTextArg']
#
# texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
#
# texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")
#
# ignore = texIgnoreMathZoneIds[0]
#
# def math():
# 	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
# 	try:
# 		first = next(i for i in reversed(synstackids) if i in texIgnoreMathZoneIds or i in texMathZoneIds)
# 		return first != ignore
# 	except StopIteration:
# 		return False

def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'

def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'

def env(name):
	[x,y] = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'

endglobal

context "math()"
snippet sq "\sqrt{}" w
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet ^^ "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

#context "math()"
snippet lrbr( "lr ()" w
\left($0\right)
endsnippet

#context "math()"
snippet lrbr{ "" w
\left\\{$0\right\\}
endsnippet

#context "math()"
snippet lr| "" w
\left\lvert$0\right\rvert
endsnippet

context "math()"
snippet lr[ "left[ right]" w
\left[${1:${VISUAL}}\right]$0
endsnippet

context "math()"
snippet lr< "leftangle rightangle" w
\left<${1:${VISUAL}}\right>$0
endsnippet

context "math()"
snippet ceil "ceil" w
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" w
\left\lfloor $1 \right\rfloor$0
endsnippet

# TODO: change
context "math()"
snippet oo "infty" wA
\infty 
endsnippet

context "math()"
snippet Union "union"
\bigcup_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet Intersection "intersection"
\bigcup_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet Prod "prod"
\prod_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet "un " "union" rwA
\cup 
endsnippet

context "math()"
snippet "ins " "intersection" rwA
\cap 
endsnippet

priority 100
context "math()"
snippet ... "ldots" iA
\ldots
endsnippet

context "env('itemize')"
snippet item "ldots" iA
\item $0
endsnippet

context "math()"
snippet -> "implies" Ai
\implies 
endsnippet

context "math()"
snippet <- "implied by" Ai
\impliedby 
endsnippet

snippet mi "Math inline" i
\$ $1 \$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
	snip.rv = ' '
else:
	snip.rv = ''
`$2
endsnippet

snippet mb "Math block" w
\[
	${1:${VISUAL}}
.\] $0
endsnippet

context "math()"
snippet sum "sum" w
\sum_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet lim "limit" w
\lim_{$1 \to $2}{$0}
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{$1 \to $2}{$0}
endsnippet

context "math()"
snippet liminf "liminf" w
\liminf_{$1 \to $2}{$0}
endsnippet

context "math()"
snippet <= "leq" iA
\le 
endsnippet

context "math()"
snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet != "neq" iA
\neq 
endsnippet

#context "math()"
#snippet "([A-Za-z])([nmijk\d])\2(\W)" "auto subscript 1" wrA
#`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}`!p snip.rv = match.group(3)`
#endsnippet
#context "math()"
#snippet "([A-Za-z])([ab])\2(\W)" "auto subscript 2" wrA
#`!p snip.rv = match.group(1)`_{\\`!p snip.rv = match.group(2)`}`!p snip.rv = match.group(3)`
#endsnippet
#context "math()"
#snippet "([A-Za-z])([v])\2(\W)" "auto subscript vec" wrA
#\\vec{`!p snip.rv = match.group(1)`}`!p snip.rv = match.group(3)`
#endsnippet

context "math()"
snippet "([A-Za-z])(nn|mm|ii|jj|kk|aa|bb|ww|dd|vv|11|22|33|44|55|66|77|88|99)+(\W)" "auto subscript 1" wrA
`!p
from string import digits

def Index(s: str, n: str) -> str:
	return f"{{{s}}}_{{{n}}}"

def IndexG(s: str, n: str) -> str:
	return Index(s, f"\\{n}")

def Power(s: str, n: str) -> str:
	return f"{{{s}}}^{{{n}}}"

def Func(s: str, func: str) -> str:
	return f"\\{func}{{{s}}}"

def Vec(s: str) -> str:
	return Func(s, "vec")

def Dot(s: str) -> str:
	return Func(s, "dot")

def Command(s: str, c: str):
	if c in "nmijk" + digits:
		return Index(s, c);
	if c in ['a', 'b', 'w']:
		return IndexG(s, c)
	if c == "d":
		return Dot(s)
	if c == "v":
		return Vec(s)
	return s


MATCH = r"([nmijkabwd\.v\d])\1+"
STR = match.group()
result = match.group(1)
commands = re.findall(MATCH, STR)

for c in commands:
	result = Command(result, c)

result += match.group(3)

snip.rv = result
`
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet "norm " "norm" wA
\left\lvert$1\right\rvert$0
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp) ' "math functions" rwA
\\`!p snip.rv = match.group(1)`{$0}
endsnippet

priority 300
context "math()"
snippet itl "integral" wA
\int_{$1}^{$2}{$0}
endsnippet

snippet definition "\dfn" wA
\\dfn{$1}{
	$0
}
endsnippet
snippet theorem "\thm" wA
\\thm{$1}{
	$0
}
endsnippet
snippet lemma "\mlemma" wA
\\mlenma{$1}{
	$0
}
endsnippet

snippet sect "section" b
\\section{$1}

$0
endsnippet
snippet ssect "section" b
\\subsection{$1}

$0
endsnippet

context "math()"
snippet vec "\vec" w
\vec{$0}
endsnippet

context "math()"
snippet dot "\dot" w
\dot{$0}
endsnippet

context "math()"
snippet set "\dot" w
\\left\\{$1\\right\\}$0
endsnippet

context "math()"
snippet setld "\dot" w
\set{{$1}_{$2}, \ldots, {$1}_{$3}}$0
endsnippet
context "math()"
snippet setlu "\dot" w
\set{{$1}^{$2}, \ldots, {$1}^{$3}}$0
endsnippet

context "math()"
snippet setcd "\dot" w
\set{{$1}_{$2}}$0
endsnippet
context "math()"
snippet setcu "\dot" w
\set{{$1}^{$2}}$0
endsnippet

context "math()"
snippet setcde "\dot" w
\set{{$1}_{$2}}_{$2 \in $3}$0
endsnippet
context "math()"
snippet setcue "\dot" w
\set{{$1}^{$2}}_{$2 \in $3}$0
endsnippet
