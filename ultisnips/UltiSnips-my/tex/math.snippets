global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
endglobal

context "math()"
snippet eps "epsilon"
\\epsilon$0
endsnippet

context "math()"
snippet veps "varepsilon"
\\varepsilon$0
endsnippet

context "math()"
snippet omega "omega" i
\\omega$0
endsnippet

context "math()"
snippet delta "omega" i
\\delta$0
endsnippet

context "math()"
snippet alpha "alpha" i
\\alpha$0
endsnippet

context "math()"
snippet beta "beta" i
\\beta$0
endsnippet

context "math()"
snippet sr "^2" iA
^2
endsnippet

context "math()"
snippet cb "^3" iA
^3
endsnippet

context "math()"
snippet ^^ "to the ... power" iA
^{$1}$0
endsnippet

context "math()"
snippet __ "subscript" iA
_{$1}$0
endsnippet

context "math()"
snippet sq "\sqrt{}" w
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet lrbr( "lr ()" w
\left($0\right)
endsnippet

context "math()"
snippet lrbr{ "" w
\left\\{$0\right\\}
endsnippet

context "math()"
snippet lr| "" w
\left\lvert$0\right\rvert
endsnippet

context "math()"
snippet lr[ "left[ right]" w
\left[${1:${VISUAL}}\right]$0
endsnippet

context "math()"
snippet lr< "leftangle rightangle" w
\left<${1:${VISUAL}}\right>$0
endsnippet

context "math()"
snippet ceil "ceil" w
\left\lceil $1 \right\rceil$0
endsnippet

context "math()"
snippet floor "floor" w
\left\lfloor $1 \right\rfloor$0
endsnippet

context "math()"
snippet oo "infty" wA
\infty
endsnippet

context "math()"
snippet Union "union"
\bigcup_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet UnionSq "union"
\bigsqcup_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet Intersection "intersection"
\bigcap_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet Prod "prod"
\prod_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet "un " "union" rwA
\cup 
endsnippet

context "math()"
snippet "ins " "intersection" rwA
\cap 
endsnippet

context "math()"
snippet "or " "union" rwA
\lor 
endsnippet

context "math()"
snippet "not " "union" rwA
\lnot 
endsnippet

context "math()"
snippet Or "Big logic or"
\bigvee_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet And "Big logic and" i
\bigwedge_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet "and " "union" rwA
\land 
endsnippet

context "math()"
snippet -> "implies" iA
\implies 
endsnippet

context "math()"
snippet <- "implied by" iA
\impliedby 
endsnippet

context "math()"
snippet sum "sum" w
\sum_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet lim "limit" w
\lim_{$1 \to $2}{$0}
endsnippet

context "math()"
snippet limsup "limsup" w
\limsup_{$1 \to $2}{$0}
endsnippet

context "math()"
snippet liminf "liminf" w
\liminf_{$1 \to $2}{$0}
endsnippet

context "math()"
snippet <= "leq" iA
\le 
endsnippet

context "math()"
snippet >= "geq" iA
\ge 
endsnippet

context "math()"
snippet != "neq" iA
\neq 
endsnippet

context "math()"
snippet >> "gg" iA
\gg 
endsnippet

context "math()"
snippet << "ll" iA
\ll 
endsnippet

context "math()"
snippet d= "left def eq" iA
\defeq 
endsnippet

context "math()"
snippet := "left def eq" iA
\ldefeq 
endsnippet

context "math()"
snippet =: "right def eq" iA
\rdefeq 
endsnippet

priority -100
context "math()"
snippet "(\\?[A-Za-z0-9]+\..+)+(/)" "auto subscript 1" wrA
`!p
from string import digits

def ParseArgs(args: str) -> list[str]:
	return args.split(',')

def IndexD(prefix: str, index: str) -> str:
	return f"{{{prefix}}}_{{{index}}}"

def Perp(prefix: str, args: str = None) -> str:
    return IndexD(prefix, r"\perp")

def Parallel(prefix: str, args: str = None) -> str:
    return IndexD(prefix, r"\parallel")

def IndexU(prefix: str, index: str) -> str:
	return f"{{{prefix}}}^{{{index}}}"

def Stroke(prefix: str, args: str = None) -> str:
	n = 1
	if len(args) == 1:
		n = int(args)
    return IndexU(prefix, "'" * n)

def addFunc(prefix: str, func: str) -> str:
	return f"\\{func}{{{prefix}}}"

def Vec(prefix: str, args: str = None) -> str:
	return addFunc(prefix, "vec")

def Dot(prefix: str, args: str = None) -> str:
	n = 1
	if len(args) == 1:
		n = int(args)
	return addFunc(prefix, "d" * n + "ot")

def Overline(prefix: str, args: str = None) -> str:
	return addFunc(prefix, "overline")

def Underline(prefix: str, args: str = None) -> str:
	return addFunc(prefix, "underline")

def Abs(prefix: str, args: str = None) -> str:
	return addFunc(prefix, "abs")

def Dv(prefix: str, args: str = None) -> str:
	return addFunc(prefix, f"Dv{{{args}}}")

def dv(prefix: str, args: str = None) -> str:
	return addFunc(prefix, f"dv{{{args}}}")

def ParseCommand(cmd: str) -> tuple[str, str]:
    command = cmd[0]
    args = cmd[1:]
	return command, args

def SimpleDv(prefix: str, args: str = None) -> str:
	return IndexU(prefix, f"({args})")

getFunc: dict[str] = {
	"^": IndexU,
	"_": IndexD,
	"v": Vec,
	"d": dv,
	"D": Dv,
	"o": Overline,
	"u": Underline,
	"a": Abs,
    "p": Perp,
    "P": Parallel,
    "s": Stroke,
    "t": Dot,
    "T": SimpleDv,
}

def FindFunc(name: str):
	return getFunc[name]

def Command(prefix: str, command: str):
	c_name, c_args = ParseCommand(command)
	s = getFunc[c_name](prefix, c_args)
	return s

input = match[1]
sep = match[2]

MATCH = r"(\\?[a-zA-Z]*)(\..*)+"
m = re.match(MATCH, input)
prefix = m[1]
commands = m[2]
list_commands = commands.split(".")[1:]

for c in list_commands:
	prefix = Command(prefix, c)

# prefix += sep
snip.rv = prefix
`
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

priority 100
context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet integral "integral" i
\int_{$1}^{$2}{$0}
endsnippet

context "math()"
snippet vec "\vec" w
\vec{$0}
endsnippet

context "math()"
snippet abs "\vec" w
\abs{$0}
endsnippet

context "math()"
snippet dot "\dot" w
\dot{$0}
endsnippet

priority 100
context "math()"
snippet '(?<!\\)(sin|cos|arccot|cot|csc|ln|log|exp|star|perp) ' "math functions" rwA
\\`!p snip.rv = match.group(1)`{$0}
endsnippet

context "math()"
snippet set "\dot" w
\\left\\{$1\\right\\}$0
endsnippet

context "math()"
snippet setld "\dot" w
\set{{$1}_{$2}, \ldots, {$1}_{$3}}$0
endsnippet

context "math()"
snippet setlu "\dot" w
\set{{$1}^{$2}, \ldots, {$1}^{$3}}$0
endsnippet

context "math()"
snippet setcd "\dot" w
\set{{$1}_{$2}}$0
endsnippet

context "math()"
snippet setcu "\dot" w
\set{{$1}^{$2}}$0
endsnippet

context "math()"
snippet setcde "\dot" w
\set{{$1}_{$2}}_{$2 \in $3}$0
endsnippet

context "math()"
snippet setcue "\dot" w
\set{{$1}^{$2}}_{$2 \in $3}$0
endsnippet

